/************************** Breadth For Search Algo (BFS) *******************************/ // (ITERATIVE APPROACH)
	// same as level order transervsal of Tree but with some updation steps -- > kya vertex v1 & v2 connected hai?
	
	public boolean BFS(int src, int des)
	{
		HashSet<Integer> visited = new HashSet<>();
		Queue<Integer> q = new LinkedList<>();
		
		q.add(src);
		
		while(!q.isEmpty())
		{
			// step 1 --> remove one data
			int removed = q.poll();
			
			// step 2 --> agr visited vertex hai .. & usiko wapis remove kia jara hai Queue se.. it means 2 Paths hai
			// means CYCLE detect hori hai Graph me		// 2 alg alg graphs hai jinke v1 v2 kv nhi milege so ek hi graph me ghumre
			if(visited.contains(removed))
			{
				continue;						// agr already visited hai and visited hi wapis apprear hua hai Q me toh ignore krke
			}												// next elements pe jao Q wale process repeat krne next element se
			
			// step 3 --> visited mark krdo Set me
			visited.add(removed);
			
			// step 4 --> self work krlo jo krna hai --> this time meko src == des mil rhe kya check krna hai.. connext hai kya?
			if(removed==des)									// remove kiya hua vertex des tk phoch jaye mtlb src se hi aaya hai na remov wale vertex tk.. toh remove wala pohoch gya des pe mtlb src v phoch jayega
				return true;
			
			// step 5 --> ab iske neighbours ko add krdo agr honge toh (add child if exists)
			// unvisited neighbours ko hi add krna hai only
			for(int key : map.keySet())
			{
				// agr visited nhi hai neighbour toh hi add krege
				if(!visited.contains(key))
					q.add(key);
			}
		}
		
		return false;
	}
